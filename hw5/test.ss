(write (expr-compare 12 12))
(newline)
(write (expr-compare 12 20))
(newline)
(write (expr-compare #t #t))
(newline)
(write (expr-compare #f #f))
(newline)
(write (expr-compare #t #f))
(newline)
(write (expr-compare #f #t))
(newline)
(write (expr-compare 'a '(cons a b)))
(newline)
(write (expr-compare '(cons a b) '(cons a b)))
(newline)
(write (expr-compare '(cons a b) '(cons a c)))
(newline)
(write (expr-compare '(cons (cons a b) (cons b c))
              '(cons (cons a c) (cons a c))))
(newline)
(write (expr-compare '(cons a b) '(list a b)))
(newline)
(write (expr-compare '(list) '(list a)))
(newline)
(write (expr-compare ''(a b) ''(a c)))
(newline)
(write (expr-compare '(quote (a b)) '(quote (a c))))
(newline)
(write (expr-compare '(quoth (a b)) '(quoth (a c))))
(newline)
(write (expr-compare '(if x y z) '(if x z z)))
(newline)
(write (expr-compare '(if x y z) '(g x y z)))
(newline)
(write (expr-compare '((lambda (a) (f a)) 1) '((lambda (a) (g a)) 2)))
(newline)
(write (expr-compare '((lambda (a) (f a)) 1) '((λ (a) (g a)) 2)))
(newline)
(write (expr-compare '((lambda (a) a) c) '((lambda (b) b) d)))
(newline)
(write (expr-compare ''((λ (a) a) c) ''((lambda (b) b) d)))
(newline)
(write (expr-compare '(+ #f ((λ (a b) (f a b)) 1 2))
              '(+ #t ((lambda (a c) (f a c)) 1 2))))
(newline)
(write (expr-compare '((λ (a b) (f a b)) 1 2)
              '((λ (a b) (f b a)) 1 2)))
(newline)
(write (expr-compare '((λ (a b) (f a b)) 1 2)
              '((λ (a c) (f c a)) 1 2)))
(newline)
(write (expr-compare '((lambda (a) (eq? a ((λ (a b) ((λ (a b) (a b)) b a))
                                    a (lambda (a) a))))
                (lambda (b a) (b a)))
              '((λ (a) (eqv? a ((lambda (b a) ((lambda (a b) (a b)) b a))
                                a (λ (b) a))))
                (lambda (a b) (a b)))))